#!/bin/bash
set -e

echo "==> Docker entrypoint started"

# Enable jemalloc for reduced memory usage
if [ -z "${LD_PRELOAD+x}" ] && [ -f /usr/lib/*/libjemalloc.so.2 ]; then
  export LD_PRELOAD="$(echo /usr/lib/*/libjemalloc.so.2)"
  echo "==> jemalloc enabled"
fi

# Copy config templates if needed
if [ ! -f "config/application.yml" ]; then
  echo "==> Copying application.yml.example"
  cp config/application.yml.example config/application.yml
fi

if [ ! -f "config/database.yml" ]; then
  echo "==> Copying database.yml.example"
  cp config/database.yml.example config/database.yml
fi

# Prepare database if starting rails server
if [ "${1}" == "./bin/rails" ] && [ "${2}" == "server" ]; then
  echo "==> Preparing database..."
  
  # Check if DATABASE_URL is set
  if [ -z "${DATABASE_URL}" ]; then
    echo "ERROR: DATABASE_URL environment variable is not set!"
    echo "Please set DATABASE_URL in Render Dashboard or render.yaml"
    exit 1
  fi
  
  echo "==> DATABASE_URL is set"
  
  # Wait for database to be ready (max 30 seconds)
  echo "==> Waiting for database to be ready..."
  for i in {1..30}; do
    if ./bin/rails runner "ActiveRecord::Base.connection.execute('SELECT 1')" 2>/dev/null; then
      echo "==> Database is ready!"
      break
    fi
    
    if [ $i -eq 30 ]; then
      echo "ERROR: Database is not ready after 30 seconds"
      echo "Please check:"
      echo "  1. PostgreSQL database is created on Render"
      echo "  2. DATABASE_URL is correct"
      echo "  3. Database and Web Service are in the same region"
      exit 1
    fi
    
    echo "==> Waiting for database... ($i/30)"
    sleep 1
  done
  
  # Run migrations
  echo "==> Running database migrations..."
  if ./bin/rails db:prepare; then
    echo "==> Database migrations completed successfully"
  else
    echo "ERROR: Database migrations failed"
    exit 1
  fi
fi

echo "==> Starting application: ${@}"
exec "${@}"
