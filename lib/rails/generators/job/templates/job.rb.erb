class <%= class_name %> < ApplicationJob
  queue_as :<%= queue_name %>

  # Configure retry strategy
  # retry_on StandardError, wait: :exponentially_longer, attempts: 3
  # discard_on ActiveRecord::RecordNotFound

  # IMPORTANT: Do NOT catch exceptions and swallow them!
  # BAD:
  #   rescue => e
  #     Rails.logger.error(e)
  #     # Error is hidden, job appears successful
  #   end
  #
  # GOOD: Let exceptions propagate naturally
  #   rescue => e
  #     Rails.logger.error(e)
  #     raise  # Re-raise to trigger retry/failure handling
  #   end
  #
  # Why: Development uses inline mode for immediate feedback.
  #      Production has GoodJob dashboard to track failures.
  #
  # ðŸ’¡ Always consider syncing results to frontend, use the following example code:
  #
  #   ActionCable.server.broadcast("xxx_#{id}", {
  #     type: 'update',  # REQUIRED: type field routes to client handler method
  #     data: your_data  # Frontend MUST implement xxxController#handleUpdate() method
  #   })
  def perform(*args)
    # TODO: Implement your job logic here
    raise 'Not Implement job here'
  end
end
