import BaseChannelController from "./base_channel_controller"

/**
 * <%= file_name.camelize %> Controller - Handles WebSocket + UI for <%= file_name.humanize.downcase %>
 *
 * Server sends JSON with 'type' field, automatically routes to handleXxx() methods
 */
export default class extends BaseChannelController {
  static targets = [
    // Add UI targets here, e.g.:
    // "output"
  ]

  static values = {
    // Add values here, e.g.:
    // roomId: String
  }

  connect(): void {
    console.log("<%= file_name.camelize %> controller connected")

    this.createSubscription("<%= channel_name %>", {
      // Add subscription parameters here, e.g.:
      // room_id: this.roomIdValue
    })
  }

  disconnect(): void {
    this.destroySubscription()
  }

  protected channelConnected(): void {
    // Called when WebSocket connects
  }

  protected channelDisconnected(): void {
    // Called when WebSocket disconnects
  }

  // âš¡ AUTO-ROUTED HANDLERS: Server sends { type: 'xxx' } â†’ calls handleXxx(data)
  //
  // EXAMPLE: Handle new message from server
  // protected handleNewMessage(data: any): void {
  //   console.log('New message:', data.content)
  //   // Update DOM based on data
  //   if (this.hasOutputTarget) {
  //     const messageEl = document.createElement('div')
  //     messageEl.textContent = data.content
  //     this.outputTarget.appendChild(messageEl)
  //   }
  // }

  // EXAMPLE: Handle status update from server
  // protected handleStatusUpdate(data: any): void {
  //   console.log('Status:', data.status)
  // }

  // ðŸ’¡ UI METHODS: For local interactions (scroll, toggle, etc.)
  //
  // scrollToBottom(): void {
  //   if (this.hasOutputTarget) {
  //     this.outputTarget.scrollTop = this.outputTarget.scrollHeight
  //   }
  // }
}
